import asyncio
import websockets
import json
import time

# URL del servidor TTS WebSocket
URI = "ws://localhost:8765"

# Frases con diferentes longitudes para probar
frases = [
    {
        "text": (
            "Hoy despert√© con una enorme sonrisa. "
            "El sol brillaba con fuerza y sent√≠ que todo era posible. "
            "Prepar√© mi desayuno favorito y puse mi canci√≥n preferida a todo volumen, bailando sin preocupaciones."
        ),
        "emotion": "alegre",
    },
    {
        "text": (
            "Despu√©s de un rato, me detuve a mirar por la ventana. "
            "Me di cuenta de que, aunque era un buen d√≠a, hab√≠a muchas cosas que a√∫n no entend√≠a de la vida. "
            "Record√© que a veces el destino nos lleva por caminos inesperados, y eso me hizo reflexionar en silencio."
        ),
        "emotion": "neutral",
    },
    {
        "text": (
            "Entonces lleg√≥ a mi mente aquel momento doloroso. "
            "Hace un a√±o, perd√≠ a alguien que amaba profundamente, y desde entonces hay un vac√≠o que nada puede llenar. "
            "Una tristeza silenciosa me envolvi√≥, como una sombra que no se va."
        ),
        "emotion": "triste",
    },
    {
        "text": (
            "Pero justo en ese instante, son√≥ mi tel√©fono. "
            "Era un amigo que no ve√≠a hace a√±os y me invit√≥ a salir. "
            "De pronto mi coraz√≥n volvi√≥ a llenarse de alegr√≠a, como si el universo me regalara un peque√±o milagro."
        ),
        "emotion": "alegre",
    },
    {
        "text": (
            "Mientras caminaba hacia el encuentro, pens√© en todo lo que hab√≠a pasado en este tiempo. "
            "La vida es un equilibrio extra√±o entre momentos de luz y de sombra. "
            "Respir√© hondo, sinti√©ndome en paz, aunque consciente de que nada es permanente."
        ),
        "emotion": "neutral",
    },
    {
        "text": (
            "Al llegar al lugar, vi una foto en la pared que me record√≥ de nuevo esa p√©rdida. "
            "Fue como un golpe suave pero inevitable. "
            "Sent√≠ una l√°grima caer y comprend√≠ que la tristeza siempre encuentra un camino para volver, aunque sepamos que debemos seguir adelante."
            "a.a"
            "a,a"
        ),
        "emotion": "triste",
    }
]


async def benchmark():
    async with websockets.connect(URI) as ws:
        # Esperar mensaje inicial del servidor
        ready = await ws.recv()
        print("‚úÖ Servidor respondi√≥:", ready)

        for idx, item in enumerate(frases, 1):
            texto = item["text"]
            emocion = item["emotion"]

            # Pausa para no saturar el servidor entre pruebas
            #print("\n‚è≥ Esperando 5 segundos antes de la siguiente prueba...")
            #await asyncio.sleep(5)

            print(f"\n‚ñ∂Ô∏è Prueba {idx}: {len(texto.split())} palabras | Emoci√≥n: {emocion}")
            print(f"üìù Texto: {texto}")

            # Enviar mensaje al servidor con texto + emoci√≥n
            await ws.send(
                json.dumps(
                    {
                        "cmd": "say",
                        "text": texto,
                        "emotion": emocion  # Si el servidor no usa emociones, lo ignora
                    }
                )
            )

            start_send = time.time()
            t_hablando = None
            t_parado = None

            # Escuchar estados hasta que termine
            while True:
                msg = await ws.recv()
                data = json.loads(msg)
                estado = data.get("estado")

                if estado == "hablando":
                    t_hablando = time.time()
                    print(f"üéôÔ∏è Servidor empez√≥ a hablar a los {t_hablando - start_send:.2f}s")

                elif estado == "parado":
                    t_parado = time.time()
                    print(f"‚èπ Servidor termin√≥ a los {t_parado - start_send:.2f}s")
                    break

            # An√°lisis del rendimiento
            if t_hablando and t_parado:
                synthesis_latency = t_hablando - start_send
                playback_time = t_parado - t_hablando
                total_time = t_parado - start_send

                print(f"‚è± Latencia de s√≠ntesis (env√≠o‚Üíhablando): {synthesis_latency:.2f}s")
                print(f"üéß Duraci√≥n aproximada del audio (hablando‚Üíparado): {playback_time:.2f}s")
                print(f"üåê Tiempo total percibido (env√≠o‚Üíparado): {total_time:.2f}s")

        print("\n‚úÖ Benchmark finalizado.")

# Ejecutar benchmark
asyncio.run(benchmark())
